-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel2_2mm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ni : IN STD_LOGIC_VECTOR (31 downto 0);
    nj : IN STD_LOGIC_VECTOR (31 downto 0);
    nk : IN STD_LOGIC_VECTOR (31 downto 0);
    nl : IN STD_LOGIC_VECTOR (31 downto 0);
    alpha : IN STD_LOGIC_VECTOR (63 downto 0);
    beta : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tmp_ce0 : OUT STD_LOGIC;
    tmp_we0 : OUT STD_LOGIC;
    tmp_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    tmp_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    D_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    D_ce0 : OUT STD_LOGIC;
    D_we0 : OUT STD_LOGIC;
    D_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    D_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel2_2mm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel2_2mm,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.042000,HLS_SYN_LAT=960642,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=1488,HLS_SYN_LUT=1602,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_232 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_fu_251_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_453 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln37_fu_265_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln37_reg_458 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln36_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_275_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_467 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln39_fu_281_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln39_reg_472 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln37_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_addr_reg_477 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_fu_301_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_reg_485 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln40_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_1_fu_333_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln41_1_reg_495 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_load_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal B_load_reg_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_348_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_518 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln44_fu_362_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln44_reg_523 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln43_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_372_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_532 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln46_fu_378_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln46_reg_537 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln44_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_addr_reg_542 : STD_LOGIC_VECTOR (9 downto 0);
    signal D_load_reg_547 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal k_2_fu_398_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_reg_555 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln47_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_7_reg_570 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal C_load_reg_575 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_580 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal i_0_reg_132 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_143 : STD_LOGIC_VECTOR (5 downto 0);
    signal storemerge_reg_154 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_0_reg_167 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_178 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_189 : STD_LOGIC_VECTOR (5 downto 0);
    signal storemerge1_reg_200 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_reg_211 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln39_1_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_1_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_3_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_1_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_228_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal tmp_7_fu_257_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_fu_285_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln41_fu_307_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln41_fu_311_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_321_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_2_fu_329_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_354_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln46_fu_382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln48_fu_404_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_fu_408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_418_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_2_fu_426_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln48_1_fu_430_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component kernel2_2mm_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel2_2mm_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    kernel2_2mm_dadd_64ns_64ns_64_5_full_dsp_1_U1 : component kernel2_2mm_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_222_p0,
        din1 => grp_fu_222_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_222_p2);

    kernel2_2mm_dmul_64ns_64ns_64_5_max_dsp_1_U2 : component kernel2_2mm_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_228_p0,
        din1 => grp_fu_228_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_228_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_269_p2 = ap_const_lv1_1))) then 
                i_0_reg_132 <= i_reg_453;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_132 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_1_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_245_p2 = ap_const_lv1_1))) then 
                i_1_reg_178 <= ap_const_lv6_0;
            elsif (((icmp_ln44_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_1_reg_178 <= i_2_reg_518;
            end if; 
        end if;
    end process;

    j_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln40_fu_295_p2 = ap_const_lv1_1))) then 
                j_0_reg_143 <= j_reg_467;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_245_p2 = ap_const_lv1_0))) then 
                j_0_reg_143 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln47_fu_392_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                j_1_reg_189 <= j_2_reg_532;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln43_fu_342_p2 = ap_const_lv1_0))) then 
                j_1_reg_189 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                k_0_reg_167 <= k_reg_485;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_269_p2 = ap_const_lv1_0))) then 
                k_0_reg_167 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_1_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                k_1_reg_211 <= k_2_reg_555;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                k_1_reg_211 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    storemerge1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                storemerge1_reg_200 <= grp_fu_222_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                storemerge1_reg_200 <= grp_fu_228_p2;
            end if; 
        end if;
    end process;

    storemerge_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                storemerge_reg_154 <= grp_fu_222_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_269_p2 = ap_const_lv1_0))) then 
                storemerge_reg_154 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                A_load_reg_500 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                B_load_reg_510 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                C_load_reg_575 <= C_q0;
                empty_7_reg_570 <= tmp_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln44_fu_366_p2 = ap_const_lv1_0))) then
                D_addr_reg_542 <= zext_ln46_1_fu_387_p1(10 - 1 downto 0);
                    zext_ln46_reg_537(5 downto 0) <= zext_ln46_fu_378_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                D_load_reg_547 <= D_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln40_fu_295_p2 = ap_const_lv1_0))) then
                add_ln41_1_reg_495 <= add_ln41_1_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                i_2_reg_518 <= i_2_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_453 <= i_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                j_2_reg_532 <= j_2_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_467 <= j_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                k_2_reg_555 <= k_2_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_485 <= k_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_232 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp_5_reg_580 <= grp_fu_228_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_269_p2 = ap_const_lv1_0))) then
                tmp_addr_reg_477 <= zext_ln39_1_fu_290_p1(10 - 1 downto 0);
                    zext_ln39_reg_472(5 downto 0) <= zext_ln39_fu_281_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_245_p2 = ap_const_lv1_0))) then
                    zext_ln37_reg_458(10 downto 5) <= zext_ln37_fu_265_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln43_fu_342_p2 = ap_const_lv1_0))) then
                    zext_ln44_reg_523(10 downto 5) <= zext_ln44_fu_362_p1(10 downto 5);
            end if;
        end if;
    end process;
    zext_ln37_reg_458(4 downto 0) <= "00000";
    zext_ln37_reg_458(11) <= '0';
    zext_ln39_reg_472(11 downto 6) <= "000000";
    zext_ln44_reg_523(4 downto 0) <= "00000";
    zext_ln44_reg_523(11) <= '0';
    zext_ln46_reg_537(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln36_fu_245_p2, ap_CS_fsm_state3, icmp_ln37_fu_269_p2, ap_CS_fsm_state4, icmp_ln40_fu_295_p2, ap_CS_fsm_state21, icmp_ln43_fu_342_p2, ap_CS_fsm_state22, icmp_ln44_fu_366_p2, ap_CS_fsm_state29, icmp_ln47_fu_392_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln36_fu_245_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln37_fu_269_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln40_fu_295_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln43_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln44_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln47_fu_392_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= zext_ln41_1_fu_316_p1(10 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln41_3_fu_338_p1(10 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= zext_ln48_3_fu_435_p1(10 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    D_address0_assign_proc : process(ap_CS_fsm_state22, D_addr_reg_542, ap_CS_fsm_state29, zext_ln46_1_fu_387_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            D_address0 <= D_addr_reg_542;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            D_address0 <= zext_ln46_1_fu_387_p1(10 - 1 downto 0);
        else 
            D_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    D_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            D_ce0 <= ap_const_logic_1;
        else 
            D_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    D_d0 <= storemerge1_reg_200;

    D_we0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            D_we0 <= ap_const_logic_1;
        else 
            D_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln39_fu_285_p2 <= std_logic_vector(unsigned(zext_ln37_reg_458) + unsigned(zext_ln39_fu_281_p1));
    add_ln41_1_fu_333_p2 <= std_logic_vector(unsigned(zext_ln39_reg_472) + unsigned(zext_ln41_2_fu_329_p1));
    add_ln41_fu_311_p2 <= std_logic_vector(unsigned(zext_ln41_fu_307_p1) + unsigned(zext_ln37_reg_458));
    add_ln46_fu_382_p2 <= std_logic_vector(unsigned(zext_ln44_reg_523) + unsigned(zext_ln46_fu_378_p1));
    add_ln48_1_fu_430_p2 <= std_logic_vector(unsigned(zext_ln46_reg_537) + unsigned(zext_ln48_2_fu_426_p1));
    add_ln48_fu_408_p2 <= std_logic_vector(unsigned(zext_ln48_fu_404_p1) + unsigned(zext_ln44_reg_523));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state21, icmp_ln43_fu_342_p2)
    begin
        if (((icmp_ln43_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, icmp_ln43_fu_342_p2)
    begin
        if (((icmp_ln43_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_222_p0_assign_proc : process(storemerge_reg_154, storemerge1_reg_200, ap_CS_fsm_state16, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_222_p0 <= storemerge1_reg_200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_222_p0 <= storemerge_reg_154;
        else 
            grp_fu_222_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_222_p1_assign_proc : process(reg_232, tmp_5_reg_580, ap_CS_fsm_state16, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_222_p1 <= tmp_5_reg_580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_222_p1 <= reg_232;
        else 
            grp_fu_222_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_228_p0_assign_proc : process(reg_232, A_load_reg_500, D_load_reg_547, empty_7_reg_570, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state24, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_228_p0 <= empty_7_reg_570;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_228_p0 <= D_load_reg_547;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_228_p0 <= reg_232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_228_p0 <= A_load_reg_500;
        else 
            grp_fu_228_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_228_p1_assign_proc : process(alpha, beta, B_load_reg_510, C_load_reg_575, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state24, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_228_p1 <= C_load_reg_575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_228_p1 <= beta;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_228_p1 <= B_load_reg_510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_228_p1 <= alpha;
        else 
            grp_fu_228_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_fu_348_p2 <= std_logic_vector(unsigned(i_1_reg_178) + unsigned(ap_const_lv6_1));
    i_fu_251_p2 <= std_logic_vector(unsigned(i_0_reg_132) + unsigned(ap_const_lv6_1));
    icmp_ln36_fu_245_p2 <= "1" when (i_0_reg_132 = ap_const_lv6_20) else "0";
    icmp_ln37_fu_269_p2 <= "1" when (j_0_reg_143 = ap_const_lv6_20) else "0";
    icmp_ln40_fu_295_p2 <= "1" when (k_0_reg_167 = ap_const_lv6_20) else "0";
    icmp_ln43_fu_342_p2 <= "1" when (i_1_reg_178 = ap_const_lv6_20) else "0";
    icmp_ln44_fu_366_p2 <= "1" when (j_1_reg_189 = ap_const_lv6_20) else "0";
    icmp_ln47_fu_392_p2 <= "1" when (k_1_reg_211 = ap_const_lv6_20) else "0";
    j_2_fu_372_p2 <= std_logic_vector(unsigned(j_1_reg_189) + unsigned(ap_const_lv6_1));
    j_fu_275_p2 <= std_logic_vector(unsigned(j_0_reg_143) + unsigned(ap_const_lv6_1));
    k_2_fu_398_p2 <= std_logic_vector(unsigned(k_1_reg_211) + unsigned(ap_const_lv6_1));
    k_fu_301_p2 <= std_logic_vector(unsigned(k_0_reg_167) + unsigned(ap_const_lv6_1));
    tmp_7_fu_257_p3 <= (i_0_reg_132 & ap_const_lv5_0);
    tmp_8_fu_354_p3 <= (i_1_reg_178 & ap_const_lv5_0);
    tmp_9_fu_321_p3 <= (k_0_reg_167 & ap_const_lv5_0);

    tmp_address0_assign_proc : process(tmp_addr_reg_477, ap_CS_fsm_state4, ap_CS_fsm_state29, zext_ln48_1_fu_413_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            tmp_address0 <= zext_ln48_1_fu_413_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_address0 <= tmp_addr_reg_477;
        else 
            tmp_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    tmp_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_d0 <= storemerge_reg_154;
    tmp_s_fu_418_p3 <= (k_1_reg_211 & ap_const_lv5_0);

    tmp_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_we0 <= ap_const_logic_1;
        else 
            tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln37_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_257_p3),12));
    zext_ln39_1_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_fu_285_p2),64));
    zext_ln39_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_143),12));
    zext_ln41_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_311_p2),64));
    zext_ln41_2_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_321_p3),12));
    zext_ln41_3_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_1_reg_495),64));
    zext_ln41_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_167),12));
    zext_ln44_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_354_p3),12));
    zext_ln46_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_fu_382_p2),64));
    zext_ln46_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_189),12));
    zext_ln48_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_fu_408_p2),64));
    zext_ln48_2_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_418_p3),12));
    zext_ln48_3_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_1_fu_430_p2),64));
    zext_ln48_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_211),12));
end behav;
