// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel2_2mm,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.042000,HLS_SYN_LAT=960642,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=14,HLS_SYN_FF=1488,HLS_SYN_LUT=1602,HLS_VERSION=2019_1}" *)

module kernel2_2mm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ni,
        nj,
        nk,
        nl,
        alpha,
        beta,
        tmp_address0,
        tmp_ce0,
        tmp_we0,
        tmp_d0,
        tmp_q0,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_q0,
        D_address0,
        D_ce0,
        D_we0,
        D_d0,
        D_q0
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ni;
input  [31:0] nj;
input  [31:0] nk;
input  [31:0] nl;
input  [63:0] alpha;
input  [63:0] beta;
output  [9:0] tmp_address0;
output   tmp_ce0;
output   tmp_we0;
output  [63:0] tmp_d0;
input  [63:0] tmp_q0;
output  [9:0] A_address0;
output   A_ce0;
input  [63:0] A_q0;
output  [9:0] B_address0;
output   B_ce0;
input  [63:0] B_q0;
output  [9:0] C_address0;
output   C_ce0;
input  [63:0] C_q0;
output  [9:0] D_address0;
output   D_ce0;
output   D_we0;
output  [63:0] D_d0;
input  [63:0] D_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] tmp_address0;
reg tmp_ce0;
reg tmp_we0;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg[9:0] D_address0;
reg D_ce0;
reg D_we0;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_228_p2;
reg   [63:0] reg_232;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state28;
wire   [63:0] grp_fu_222_p2;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state40;
wire   [5:0] i_fu_251_p2;
reg   [5:0] i_reg_453;
wire    ap_CS_fsm_state2;
wire   [11:0] zext_ln39_fu_265_p1;
reg   [11:0] zext_ln39_reg_458;
wire   [0:0] icmp_ln38_fu_245_p2;
wire   [5:0] j_fu_275_p2;
reg   [5:0] j_reg_467;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln41_fu_281_p1;
reg   [11:0] zext_ln41_reg_472;
wire   [0:0] icmp_ln39_fu_269_p2;
reg   [9:0] tmp_addr_reg_477;
wire   [5:0] k_fu_301_p2;
reg   [5:0] k_reg_485;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln42_fu_295_p2;
wire   [11:0] add_ln45_1_fu_333_p2;
reg   [11:0] add_ln45_1_reg_495;
reg   [63:0] A_load_reg_500;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
reg   [63:0] B_load_reg_510;
wire   [5:0] i_2_fu_348_p2;
reg   [5:0] i_2_reg_518;
wire    ap_CS_fsm_state21;
wire   [11:0] zext_ln48_fu_362_p1;
reg   [11:0] zext_ln48_reg_523;
wire   [0:0] icmp_ln47_fu_342_p2;
wire   [5:0] j_2_fu_372_p2;
reg   [5:0] j_2_reg_532;
wire    ap_CS_fsm_state22;
wire   [11:0] zext_ln50_fu_378_p1;
reg   [11:0] zext_ln50_reg_537;
wire   [0:0] icmp_ln48_fu_366_p2;
reg   [9:0] D_addr_reg_542;
reg   [63:0] D_load_reg_547;
wire    ap_CS_fsm_state23;
wire   [5:0] k_2_fu_398_p2;
reg   [5:0] k_2_reg_555;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln51_fu_392_p2;
reg   [63:0] empty_7_reg_570;
wire    ap_CS_fsm_state30;
reg   [63:0] C_load_reg_575;
reg   [63:0] tmp_5_reg_580;
wire    ap_CS_fsm_state35;
reg   [5:0] i_0_reg_132;
reg   [5:0] j_0_reg_143;
reg   [63:0] storemerge_reg_154;
reg   [5:0] k_0_reg_167;
reg   [5:0] i_1_reg_178;
reg   [5:0] j_1_reg_189;
reg   [63:0] storemerge1_reg_200;
reg   [5:0] k_1_reg_211;
wire   [63:0] zext_ln41_1_fu_290_p1;
wire   [63:0] zext_ln45_1_fu_316_p1;
wire   [63:0] zext_ln45_3_fu_338_p1;
wire   [63:0] zext_ln50_1_fu_387_p1;
wire   [63:0] zext_ln54_1_fu_413_p1;
wire   [63:0] zext_ln54_3_fu_435_p1;
reg   [63:0] grp_fu_222_p0;
reg   [63:0] grp_fu_222_p1;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state36;
reg   [63:0] grp_fu_228_p0;
reg   [63:0] grp_fu_228_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state31;
wire   [10:0] tmp_7_fu_257_p3;
wire   [11:0] add_ln41_fu_285_p2;
wire   [11:0] zext_ln45_fu_307_p1;
wire   [11:0] add_ln45_fu_311_p2;
wire   [10:0] tmp_9_fu_321_p3;
wire   [11:0] zext_ln45_2_fu_329_p1;
wire   [10:0] tmp_8_fu_354_p3;
wire   [11:0] add_ln50_fu_382_p2;
wire   [11:0] zext_ln54_fu_404_p1;
wire   [11:0] add_ln54_fu_408_p2;
wire   [10:0] tmp_s_fu_418_p3;
wire   [11:0] zext_ln54_2_fu_426_p1;
wire   [11:0] add_ln54_1_fu_430_p2;
reg   [39:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
end

kernel2_2mm_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kernel2_2mm_dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_222_p0),
    .din1(grp_fu_222_p1),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

kernel2_2mm_dmul_64ns_64ns_64_5_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kernel2_2mm_dmul_64ns_64ns_64_5_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_228_p0),
    .din1(grp_fu_228_p1),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln39_fu_269_p2 == 1'd1))) begin
        i_0_reg_132 <= i_reg_453;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_132 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln38_fu_245_p2 == 1'd1))) begin
        i_1_reg_178 <= 6'd0;
    end else if (((icmp_ln48_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        i_1_reg_178 <= i_2_reg_518;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln42_fu_295_p2 == 1'd1))) begin
        j_0_reg_143 <= j_reg_467;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln38_fu_245_p2 == 1'd0))) begin
        j_0_reg_143 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_392_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        j_1_reg_189 <= j_2_reg_532;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln47_fu_342_p2 == 1'd0))) begin
        j_1_reg_189 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        k_0_reg_167 <= k_reg_485;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln39_fu_269_p2 == 1'd0))) begin
        k_0_reg_167 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        k_1_reg_211 <= k_2_reg_555;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        k_1_reg_211 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        storemerge1_reg_200 <= grp_fu_222_p2;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        storemerge1_reg_200 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        storemerge_reg_154 <= grp_fu_222_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln39_fu_269_p2 == 1'd0))) begin
        storemerge_reg_154 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_load_reg_500 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        B_load_reg_510 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        C_load_reg_575 <= C_q0;
        empty_7_reg_570 <= tmp_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln48_fu_366_p2 == 1'd0))) begin
        D_addr_reg_542 <= zext_ln50_1_fu_387_p1;
        zext_ln50_reg_537[5 : 0] <= zext_ln50_fu_378_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        D_load_reg_547 <= D_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln42_fu_295_p2 == 1'd0))) begin
        add_ln45_1_reg_495 <= add_ln45_1_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_2_reg_518 <= i_2_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_453 <= i_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_2_reg_532 <= j_2_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_467 <= j_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        k_2_reg_555 <= k_2_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_485 <= k_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_232 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        tmp_5_reg_580 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln39_fu_269_p2 == 1'd0))) begin
        tmp_addr_reg_477 <= zext_ln41_1_fu_290_p1;
        zext_ln41_reg_472[5 : 0] <= zext_ln41_fu_281_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln38_fu_245_p2 == 1'd0))) begin
        zext_ln39_reg_458[10 : 5] <= zext_ln39_fu_265_p1[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln47_fu_342_p2 == 1'd0))) begin
        zext_ln48_reg_523[10 : 5] <= zext_ln48_fu_362_p1[10 : 5];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        D_address0 = D_addr_reg_542;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        D_address0 = zext_ln50_1_fu_387_p1;
    end else begin
        D_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state22))) begin
        D_ce0 = 1'b1;
    end else begin
        D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        D_we0 = 1'b1;
    end else begin
        D_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln47_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_222_p0 = storemerge1_reg_200;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_222_p0 = storemerge_reg_154;
    end else begin
        grp_fu_222_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_222_p1 = tmp_5_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_222_p1 = reg_232;
    end else begin
        grp_fu_222_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_228_p0 = empty_7_reg_570;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_228_p0 = D_load_reg_547;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_228_p0 = reg_232;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_228_p0 = A_load_reg_500;
    end else begin
        grp_fu_228_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_228_p1 = C_load_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_228_p1 = beta;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_228_p1 = B_load_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_228_p1 = alpha;
    end else begin
        grp_fu_228_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_address0 = zext_ln54_1_fu_413_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_address0 = tmp_addr_reg_477;
    end else begin
        tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_ce0 = 1'b1;
    end else begin
        tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_we0 = 1'b1;
    end else begin
        tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln38_fu_245_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln39_fu_269_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln42_fu_295_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln47_fu_342_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln48_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln51_fu_392_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln45_1_fu_316_p1;

assign B_address0 = zext_ln45_3_fu_338_p1;

assign C_address0 = zext_ln54_3_fu_435_p1;

assign D_d0 = storemerge1_reg_200;

assign add_ln41_fu_285_p2 = (zext_ln39_reg_458 + zext_ln41_fu_281_p1);

assign add_ln45_1_fu_333_p2 = (zext_ln41_reg_472 + zext_ln45_2_fu_329_p1);

assign add_ln45_fu_311_p2 = (zext_ln45_fu_307_p1 + zext_ln39_reg_458);

assign add_ln50_fu_382_p2 = (zext_ln48_reg_523 + zext_ln50_fu_378_p1);

assign add_ln54_1_fu_430_p2 = (zext_ln50_reg_537 + zext_ln54_2_fu_426_p1);

assign add_ln54_fu_408_p2 = (zext_ln54_fu_404_p1 + zext_ln48_reg_523);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_2_fu_348_p2 = (i_1_reg_178 + 6'd1);

assign i_fu_251_p2 = (i_0_reg_132 + 6'd1);

assign icmp_ln38_fu_245_p2 = ((i_0_reg_132 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_269_p2 = ((j_0_reg_143 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_295_p2 = ((k_0_reg_167 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_342_p2 = ((i_1_reg_178 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_366_p2 = ((j_1_reg_189 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_392_p2 = ((k_1_reg_211 == 6'd32) ? 1'b1 : 1'b0);

assign j_2_fu_372_p2 = (j_1_reg_189 + 6'd1);

assign j_fu_275_p2 = (j_0_reg_143 + 6'd1);

assign k_2_fu_398_p2 = (k_1_reg_211 + 6'd1);

assign k_fu_301_p2 = (k_0_reg_167 + 6'd1);

assign tmp_7_fu_257_p3 = {{i_0_reg_132}, {5'd0}};

assign tmp_8_fu_354_p3 = {{i_1_reg_178}, {5'd0}};

assign tmp_9_fu_321_p3 = {{k_0_reg_167}, {5'd0}};

assign tmp_d0 = storemerge_reg_154;

assign tmp_s_fu_418_p3 = {{k_1_reg_211}, {5'd0}};

assign zext_ln39_fu_265_p1 = tmp_7_fu_257_p3;

assign zext_ln41_1_fu_290_p1 = add_ln41_fu_285_p2;

assign zext_ln41_fu_281_p1 = j_0_reg_143;

assign zext_ln45_1_fu_316_p1 = add_ln45_fu_311_p2;

assign zext_ln45_2_fu_329_p1 = tmp_9_fu_321_p3;

assign zext_ln45_3_fu_338_p1 = add_ln45_1_reg_495;

assign zext_ln45_fu_307_p1 = k_0_reg_167;

assign zext_ln48_fu_362_p1 = tmp_8_fu_354_p3;

assign zext_ln50_1_fu_387_p1 = add_ln50_fu_382_p2;

assign zext_ln50_fu_378_p1 = j_1_reg_189;

assign zext_ln54_1_fu_413_p1 = add_ln54_fu_408_p2;

assign zext_ln54_2_fu_426_p1 = tmp_s_fu_418_p3;

assign zext_ln54_3_fu_435_p1 = add_ln54_1_fu_430_p2;

assign zext_ln54_fu_404_p1 = k_1_reg_211;

always @ (posedge ap_clk) begin
    zext_ln39_reg_458[4:0] <= 5'b00000;
    zext_ln39_reg_458[11] <= 1'b0;
    zext_ln41_reg_472[11:6] <= 6'b000000;
    zext_ln48_reg_523[4:0] <= 5'b00000;
    zext_ln48_reg_523[11] <= 1'b0;
    zext_ln50_reg_537[11:6] <= 6'b000000;
end

endmodule //kernel2_2mm
